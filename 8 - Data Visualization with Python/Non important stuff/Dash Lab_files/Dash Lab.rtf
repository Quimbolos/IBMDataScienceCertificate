{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red89\green138\blue67;\red23\green23\blue23;\red202\green202\blue202;
\red183\green111\blue179;\red194\green126\blue101;\red70\green137\blue204;\red140\green211\blue254;\red67\green192\blue160;
\red167\green197\blue152;\red212\green214\blue154;}
{\*\expandedcolortbl;;\cssrgb\c41569\c60000\c33333;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c77255\c52549\c75294;\cssrgb\c80784\c56863\c47059;\cssrgb\c33725\c61176\c83922;\cssrgb\c61176\c86275\c99608;\cssrgb\c30588\c78824\c69020;
\cssrgb\c70980\c80784\c65882;\cssrgb\c86275\c86275\c66667;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # Import required libraries\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb3 \strokec5 import\cf4 \strokec4  pandas \cf5 \strokec5 as\cf4 \strokec4  pd\cb1 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  dash\cb1 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  dash_html_components \cf5 \strokec5 as\cf4 \strokec4  html\cb1 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  dash_core_components \cf5 \strokec5 as\cf4 \strokec4  dcc\cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4  dash.dependencies \cf5 \strokec5 import\cf4 \strokec4  Input, Output\cb1 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  plotly.express \cf5 \strokec5 as\cf4 \strokec4  px\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # Read the airline data into pandas dataframe\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 airline_data =  pd.read_csv(\cf6 \strokec6 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data\cf7 \strokec7 %20F\cf6 \strokec6 iles/airline_data.csv'\cf4 \strokec4 , \cb1 \
\cb3                             \cf8 \strokec8 encoding\cf4 \strokec4  = \cf6 \strokec6 "ISO-8859-1"\cf4 \strokec4 ,\cb1 \
\cb3                             \cf8 \strokec8 dtype\cf4 \strokec4 =\{\cf6 \strokec6 'Div1Airport'\cf4 \strokec4 : \cf9 \strokec9 str\cf4 \strokec4 , \cf6 \strokec6 'Div1TailNum'\cf4 \strokec4 : \cf9 \strokec9 str\cf4 \strokec4 , \cb1 \
\cb3                                    \cf6 \strokec6 'Div2Airport'\cf4 \strokec4 : \cf9 \strokec9 str\cf4 \strokec4 , \cf6 \strokec6 'Div2TailNum'\cf4 \strokec4 : \cf9 \strokec9 str\cf4 \strokec4 \})\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # Create a dash application\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 app = dash.Dash(\cf8 \strokec8 __name__\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # Build dash app layout\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 app.layout = html.Div(\cf8 \strokec8 children\cf4 \strokec4 =[ html.H1(\cf6 \strokec6 'Flight Delay Time Statistics'\cf4 \strokec4 , \cb1 \
\cb3                                 \cf8 \strokec8 style\cf4 \strokec4 =\{\cf6 \strokec6 'textAlign'\cf4 \strokec4 : \cf6 \strokec6 'center'\cf4 \strokec4 , \cf6 \strokec6 'color'\cf4 \strokec4 : \cf6 \strokec6 '#503D36'\cf4 \strokec4 ,\cb1 \
\cb3                                 \cf6 \strokec6 'font-size'\cf4 \strokec4 : \cf10 \strokec10 30\cf4 \strokec4 \}),\cb1 \
\cb3                                 html.Div([\cf6 \strokec6 "Input Year: "\cf4 \strokec4 , dcc.Input(\cf8 \strokec8 id\cf4 \strokec4 =\cf6 \strokec6 'input-year'\cf4 \strokec4 , \cf8 \strokec8 value\cf4 \strokec4 =\cf6 \strokec6 '2010'\cf4 \strokec4 , \cb1 \
\cb3                                 \cf8 \strokec8 type\cf4 \strokec4 =\cf6 \strokec6 'number'\cf4 \strokec4 , \cf8 \strokec8 style\cf4 \strokec4 =\{\cf6 \strokec6 'height'\cf4 \strokec4 :\cf6 \strokec6 '35px'\cf4 \strokec4 , \cf6 \strokec6 'font-size'\cf4 \strokec4 : \cf10 \strokec10 30\cf4 \strokec4 \}),], \cb1 \
\cb3                                 \cf8 \strokec8 style\cf4 \strokec4 =\{\cf6 \strokec6 'font-size'\cf4 \strokec4 : \cf10 \strokec10 30\cf4 \strokec4 \}),\cb1 \
\cb3                                 html.Br(),\cb1 \
\cb3                                 html.Br(), \cb1 \
\cb3                                 \cf2 \strokec2 # Segment 1\cf4 \cb1 \strokec4 \
\cb3                                 html.Div([\cb1 \
\cb3                                         html.Div(dcc.Graph(\cf8 \strokec8 id\cf4 \strokec4 =\cf6 \strokec6 'carrier-plot'\cf4 \strokec4 )),\cb1 \
\cb3                                         html.Div(dcc.Graph(\cf8 \strokec8 id\cf4 \strokec4 =\cf6 \strokec6 'weather-plot'\cf4 \strokec4 ))\cb1 \
\cb3                                 ], \cf8 \strokec8 style\cf4 \strokec4 =\{\cf6 \strokec6 'display'\cf4 \strokec4 : \cf6 \strokec6 'flex'\cf4 \strokec4 \}),\cb1 \
\cb3                                 \cf2 \strokec2 # Segment 2\cf4 \cb1 \strokec4 \
\cb3                                 html.Div([\cb1 \
\cb3                                         html.Div(dcc.Graph(\cf8 \strokec8 id\cf4 \strokec4 =\cf6 \strokec6 'nas-plot'\cf4 \strokec4 )),\cb1 \
\cb3                                         html.Div(dcc.Graph(\cf8 \strokec8 id\cf4 \strokec4 =\cf6 \strokec6 'security-plot'\cf4 \strokec4 ))\cb1 \
\cb3                                 ], \cf8 \strokec8 style\cf4 \strokec4 =\{\cf6 \strokec6 'display'\cf4 \strokec4 : \cf6 \strokec6 'flex'\cf4 \strokec4 \}),\cb1 \
\cb3                                 \cf2 \strokec2 # Segment 3\cf4 \cb1 \strokec4 \
\cb3                                 html.Div(dcc.Graph(\cf8 \strokec8 id\cf4 \strokec4 =\cf6 \strokec6 'late-plot'\cf4 \strokec4 ), \cf8 \strokec8 style\cf4 \strokec4 =\{\cf6 \strokec6 'width'\cf4 \strokec4 :\cf6 \strokec6 '65%'\cf4 \strokec4 \})\cb1 \
\cb3                                 ])\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3 \strokec6 """ Compute_info function description\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 This function takes in airline data and selected year as an input and performs computation for creating charts and plots.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Arguments:\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     airline_data: Input airline data.\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     entered_year: Input year for which computation needs to be performed.\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Returns:\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     Computed average dataframes for carrier delay, weather delay, NAS delay, security delay, and late aircraft delay.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 """\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb3 \strokec7 def\cf4 \strokec4  \cf11 \strokec11 compute_info\cf4 \strokec4 (\cf8 \strokec8 airline_data\cf4 \strokec4 , \cf8 \strokec8 entered_year\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 # Select data\cf4 \cb1 \strokec4 \
\cb3     df =  airline_data[airline_data[\cf6 \strokec6 'Year'\cf4 \strokec4 ]==\cf9 \strokec9 int\cf4 \strokec4 (entered_year)]\cb1 \
\cb3     \cf2 \strokec2 # Compute delay averages\cf4 \cb1 \strokec4 \
\cb3     avg_car = df.groupby([\cf6 \strokec6 'Month'\cf4 \strokec4 ,\cf6 \strokec6 'Reporting_Airline'\cf4 \strokec4 ])[\cf6 \strokec6 'CarrierDelay'\cf4 \strokec4 ].mean().reset_index()\cb1 \
\cb3     avg_weather = df.groupby([\cf6 \strokec6 'Month'\cf4 \strokec4 ,\cf6 \strokec6 'Reporting_Airline'\cf4 \strokec4 ])[\cf6 \strokec6 'WeatherDelay'\cf4 \strokec4 ].mean().reset_index()\cb1 \
\cb3     avg_NAS = df.groupby([\cf6 \strokec6 'Month'\cf4 \strokec4 ,\cf6 \strokec6 'Reporting_Airline'\cf4 \strokec4 ])[\cf6 \strokec6 'NASDelay'\cf4 \strokec4 ].mean().reset_index()\cb1 \
\cb3     avg_sec = df.groupby([\cf6 \strokec6 'Month'\cf4 \strokec4 ,\cf6 \strokec6 'Reporting_Airline'\cf4 \strokec4 ])[\cf6 \strokec6 'SecurityDelay'\cf4 \strokec4 ].mean().reset_index()\cb1 \
\cb3     avg_late = df.groupby([\cf6 \strokec6 'Month'\cf4 \strokec4 ,\cf6 \strokec6 'Reporting_Airline'\cf4 \strokec4 ])[\cf6 \strokec6 'LateAircraftDelay'\cf4 \strokec4 ].mean().reset_index()\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  avg_car, avg_weather, avg_NAS, avg_sec, avg_late\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3 \strokec6 """Callback Function\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Function that returns fugures using the provided input year.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Arguments:\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6     entered_year: Input year provided by the user.\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Returns:\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6     List of figures computed using the provided helper function `compute_info`.\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 """\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # Callback decorator\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11 @app.callback\cf4 \strokec4 ( [\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3                Output(\cf8 \strokec8 component_id\cf4 \strokec4 =\cf6 \strokec6 'carrier-plot'\cf4 \strokec4 , \cf8 \strokec8 component_property\cf4 \strokec4 =\cf6 \strokec6 'figure'\cf4 \strokec4 ),\cb1 \
\cb3                Output(\cf8 \strokec8 component_id\cf4 \strokec4 =\cf6 \strokec6 'weather-plot'\cf4 \strokec4 , \cf8 \strokec8 component_property\cf4 \strokec4 =\cf6 \strokec6 'figure'\cf4 \strokec4 ),\cb1 \
\cb3                Output(\cf8 \strokec8 component_id\cf4 \strokec4 =\cf6 \strokec6 'nas-plot'\cf4 \strokec4 , \cf8 \strokec8 component_property\cf4 \strokec4 =\cf6 \strokec6 'figure'\cf4 \strokec4 ),\cb1 \
\cb3                Output(\cf8 \strokec8 component_id\cf4 \strokec4 =\cf6 \strokec6 'security-plot'\cf4 \strokec4 , \cf8 \strokec8 component_property\cf4 \strokec4 =\cf6 \strokec6 'figure'\cf4 \strokec4 ),\cb1 \
\cb3                Output(\cf8 \strokec8 component_id\cf4 \strokec4 =\cf6 \strokec6 'late-plot'\cf4 \strokec4 , \cf8 \strokec8 component_property\cf4 \strokec4 =\cf6 \strokec6 'figure'\cf4 \strokec4 )\cb1 \
\cb3                ],\cb1 \
\cb3                Input(\cf8 \strokec8 component_id\cf4 \strokec4 =\cf6 \strokec6 'input-year'\cf4 \strokec4 , \cf8 \strokec8 component_property\cf4 \strokec4 =\cf6 \strokec6 'value'\cf4 \strokec4 ))\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # Computation to callback function and return graph\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb3 \strokec7 def\cf4 \strokec4  \cf11 \strokec11 get_graph\cf4 \strokec4 (\cf8 \strokec8 entered_year\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     \cb1 \
\cb3     \cf2 \strokec2 # Compute required information for creating graph from the data\cf4 \cb1 \strokec4 \
\cb3     avg_car, avg_weather, avg_NAS, avg_sec, avg_late = compute_info(airline_data, entered_year)\cb1 \
\cb3             \cb1 \
\cb3     \cf2 \strokec2 # Line plot for carrier delay\cf4 \cb1 \strokec4 \
\cb3     carrier_fig = px.line(avg_car, \cf8 \strokec8 x\cf4 \strokec4 =\cf6 \strokec6 'Month'\cf4 \strokec4 , \cf8 \strokec8 y\cf4 \strokec4 =\cf6 \strokec6 'CarrierDelay'\cf4 \strokec4 , \cf8 \strokec8 color\cf4 \strokec4 =\cf6 \strokec6 'Reporting_Airline'\cf4 \strokec4 , \cf8 \strokec8 title\cf4 \strokec4 =\cf6 \strokec6 'Average carrrier delay time (minutes) by airline'\cf4 \strokec4 )\cb1 \
\cb3     \cf2 \strokec2 # Line plot for weather delay\cf4 \cb1 \strokec4 \
\cb3     weather_fig = px.line(avg_weather, \cf8 \strokec8 x\cf4 \strokec4 =\cf6 \strokec6 'Month'\cf4 \strokec4 , \cf8 \strokec8 y\cf4 \strokec4 =\cf6 \strokec6 'WeatherDelay'\cf4 \strokec4 , \cf8 \strokec8 color\cf4 \strokec4 =\cf6 \strokec6 'Reporting_Airline'\cf4 \strokec4 , \cf8 \strokec8 title\cf4 \strokec4 =\cf6 \strokec6 'Average weather delay time (minutes) by airline'\cf4 \strokec4 )\cb1 \
\cb3     \cf2 \strokec2 # Line plot for nas delay\cf4 \cb1 \strokec4 \
\cb3     nas_fig = px.line(avg_NAS, \cf8 \strokec8 x\cf4 \strokec4 =\cf6 \strokec6 'Month'\cf4 \strokec4 , \cf8 \strokec8 y\cf4 \strokec4 =\cf6 \strokec6 'NASDelay'\cf4 \strokec4 , \cf8 \strokec8 color\cf4 \strokec4 =\cf6 \strokec6 'Reporting_Airline'\cf4 \strokec4 , \cf8 \strokec8 title\cf4 \strokec4 =\cf6 \strokec6 'Average NAS delay time (minutes) by airline'\cf4 \strokec4 )\cb1 \
\cb3     \cf2 \strokec2 # Line plot for security delay\cf4 \cb1 \strokec4 \
\cb3     sec_fig = px.line(avg_sec, \cf8 \strokec8 x\cf4 \strokec4 =\cf6 \strokec6 'Month'\cf4 \strokec4 , \cf8 \strokec8 y\cf4 \strokec4 =\cf6 \strokec6 'SecurityDelay'\cf4 \strokec4 , \cf8 \strokec8 color\cf4 \strokec4 =\cf6 \strokec6 'Reporting_Airline'\cf4 \strokec4 , \cf8 \strokec8 title\cf4 \strokec4 =\cf6 \strokec6 'Average security delay time (minutes) by airline'\cf4 \strokec4 )\cb1 \
\cb3     \cf2 \strokec2 # Line plot for late aircraft delay\cf4 \cb1 \strokec4 \
\cb3     late_fig = px.line(avg_late, \cf8 \strokec8 x\cf4 \strokec4 =\cf6 \strokec6 'Month'\cf4 \strokec4 , \cf8 \strokec8 y\cf4 \strokec4 =\cf6 \strokec6 'LateAircraftDelay'\cf4 \strokec4 , \cf8 \strokec8 color\cf4 \strokec4 =\cf6 \strokec6 'Reporting_Airline'\cf4 \strokec4 , \cf8 \strokec8 title\cf4 \strokec4 =\cf6 \strokec6 'Average late aircraft delay time (minutes) by airline'\cf4 \strokec4 )\cb1 \
\cb3             \cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4 [carrier_fig, weather_fig, nas_fig, sec_fig, late_fig]\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # Run the app\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb3 \strokec5 if\cf4 \strokec4  \cf8 \strokec8 __name__\cf4 \strokec4  == \cf6 \strokec6 '__main__'\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     app.run_server()\cb1 \
}